{"version":3,"sources":["components/modal.jsx","App.js","serviceWorker.js","index.jsx"],"names":["EditModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateDB","idToUpdate","updateTitle","updateMessage","axios","put","id","parseInt","title","message","state","modal","data","idToDelete","objectToUpdate","toggle","bind","assertThisInitialized","setState","prevState","_this2","react_default","a","createElement","Button","onClick","CreateRounded_default","Modal","isOpen","className","ModalHeader","Input","onChange","e","target","value","type","name","placeholder","defaultValue","ModalBody","ModalFooter","color","React","Component","App","getDataFromDb","fetch","then","json","res","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","update","intervalIsSet","interval","setInterval","clearInterval","Container","fluid","Card","Form","FormGroup","Row","length","Col","xs","sm","CardHeader","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50e0ea48.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreateRoundedIcon from '@material-ui/icons/CreateRounded';\r\n\r\n\r\nclass EditModal extends React.Component {\r\n    propTypes = {\r\n    message: PropTypes.String,\r\n    title: PropTypes.String,\r\n    id: PropTypes.String,\r\n    data: PropTypes.any\r\n    };\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false,\r\n      message: null,\r\n      title: null,\r\n      updateTitle: this.props.title,\r\n      updateMessage: this.props.message,\r\n      data: [],\r\n      idToDelete: null,\r\n      idToUpdate: this.props.id,\r\n      objectToUpdate: null\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n\r\n    updateDB = (idToUpdate, updateTitle, updateMessage) => {\r\n\r\n    axios.put('http://localhost:8080/api/putData', {\r\n      id: parseInt(idToUpdate),\r\n        title: updateTitle, \r\n        message: updateMessage\r\n      \r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button onClick={this.toggle}><CreateRoundedIcon/></Button>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n          <ModalHeader toggle={this.toggle}>\r\n              <Input  \r\n              onChange={(e) => this.setState({ updateTitle: e.target.value })}\r\n              type=\"Title\" \r\n              name=\"title\" \r\n              id=\"newTitle\" \r\n              placeholder=\"Title\" \r\n              defaultValue={this.props.title}\r\n              className=\"no-border\"/>\r\n        </ModalHeader>\r\n          <ModalBody>\r\n            <Input \r\n              onChange={(e) => this.setState({ updateMessage: e.target.value })}\r\n              type=\"textarea\" \r\n              name=\"note\" \r\n              id=\"newtitle\" \r\n              placeholder=\"Take a note ...\"\r\n              defaultValue={this.props.message}\r\n              className=\"no-border\"/>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={() => this.updateDB(this.props.id, this.state.updateTitle, this.state.updateMessage)}>Update Note</Button>{' '}\r\n            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditModal;","// /client/App.js\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Button, Form, FormGroup, Input, Card, CardHeader, CardBody, Row, Col } from 'reactstrap';\r\nimport Modal from \"./components/modal\";\r\n\r\nclass App extends Component {\r\n  // initialize our state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false,\r\n      data: [],\r\n      id: 0,\r\n      title: null,\r\n      message: null,\r\n      update: null,\r\n      updateMessage: null,\r\n      intervalIsSet: false,\r\n      idToDelete: null,\r\n      idToUpdate: null,\r\n      objectToUpdate: null\r\n\r\n    };\r\n\r\n    //this.updateDB = this.updateDB.bind(this);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n\r\n  // when component mounts, first thing it does is fetch all existing data in our db\r\n  // then we incorporate a polling logic so that we can easily see if our db has\r\n  // changed and implement those changes into our UI\r\n  componentDidMount() {\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 1000);\r\n      this.setState({ intervalIsSet: interval });\r\n    }\r\n  }\r\n\r\n  // never let a process live forever\r\n  // always kill a process everytime we are done using it\r\n  componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }\r\n\r\n  // just a note, here, in the front end, we use the id key of our data object\r\n  // in order to identify which we want to Update or delete.\r\n  // for our back end, we use the object id assigned by MongoDB to modify\r\n  // data base entries\r\n\r\n  // our first get method that uses our backend api to\r\n  // fetch data from our data base\r\n  getDataFromDb = () => {\r\n    fetch('http://localhost:8080/api/getData')\r\n      .then((data) => data.json())\r\n      .then((res) => this.setState({ data: res.data }));\r\n  };\r\n\r\n  // our put method that uses our backend api\r\n  // to create new query into our data base\r\n  putDataToDB = (title, message) => {\r\n    let currentIds = this.state.data.map((data) => data.id);\r\n    let idToBeAdded = 0;\r\n    while (currentIds.includes(idToBeAdded)) {\r\n      ++idToBeAdded;\r\n    }\r\n\r\n    axios.post('http://localhost:8080/api/putData', {\r\n      id: idToBeAdded,\r\n      message: message,\r\n      title: title\r\n    });\r\n  };\r\n\r\n  // our delete method that uses our backend api\r\n  // to remove existing database information\r\n  deleteFromDB = (idTodelete) => {\r\n    parseInt(idTodelete);\r\n    let objIdToDelete = null;\r\n    this.state.data.forEach((dat) => {\r\n      if (dat.id === idTodelete) {\r\n        objIdToDelete = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.delete('http://localhost:8080/api/deleteData', {\r\n      data: {\r\n        id: objIdToDelete,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <Container fluid className=\"page-css\">\r\n        <Card className=\"header-css\">\r\n          <Form>\r\n            <FormGroup>\r\n              <Input\r\n                onChange={(e) => this.setState({ title: e.target.value })}\r\n                type=\"Title\"\r\n                name=\"title\"\r\n                id=\"newTitle\"\r\n                placeholder=\"Title\"\r\n                className=\"no-border\" />\r\n\r\n              <Input\r\n                onChange={(e) => this.setState({ message: e.target.value })}\r\n                type=\"textarea\"\r\n                name=\"note\"\r\n                id=\"newtitle\"\r\n                placeholder=\"Take a note ...\"\r\n                className=\"no-border\" />\r\n\r\n            </FormGroup>\r\n            <Button onClick={() => this.putDataToDB(this.state.title, this.state.message)}>\r\n              ADD\r\n            </Button>\r\n          </Form>\r\n        </Card>\r\n        <br />\r\n        <Row>\r\n\r\n          {data.length <= 0\r\n            ? 'NO DB ENTRIES YET'\r\n            : data.map((dat) => (\r\n              <Col xs=\"6\" sm=\"4\">\r\n                <Card className=\"card-size\">\r\n                  <CardHeader><Row><Col sm={9}><strong>{dat.title}</strong></Col><Col sm={3}><Modal id={dat.id} title={dat.title} message={dat.message} updateDB={this.updateDB}/></Col></Row></CardHeader>\r\n                  <CardBody>{dat.message}</CardBody>\r\n                  {/* <li style={{ padding: '10px' }} key={data.message}>\r\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\r\n                  <span style={{ color: 'gray' }}> data: </span>\r\n                  {dat.message}\r\n                </li> */}\r\n                  <Button color=\"danger\" onClick={() => this.deleteFromDB(dat.id)}>\r\n                    DELETE\r\n                  </Button>\r\n                  \r\n              </Card>\r\n              <br/>\r\n              </Col>\r\n            ))}\r\n\r\n        </Row>\r\n      </Container>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// client/src/index.js\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as registerServiceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker.unregister();"],"sourceRoot":""}